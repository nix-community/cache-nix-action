on:
  workflow_call:

jobs:
  collision:
    name: Restore and save cache with hash collision
    # needs: build
    permissions:
      actions: write
    runs-on: ubuntu-latest
    env:
      hash-nix1: 632f04521e847173c54fa72973ec6c39a371211c
      hash-nix2: 3a05eebede89661660945da1f151959900903b6a
      installable-nix1: nixpkgs-nix1#nixVersions.nix_2_26
      installable-nix2: nixpkgs-nix2#nixVersions.nix_2_26
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org https://cache.iog.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=
            keep-env-derivations = true
            keep-outputs = true
      - name: Update the branch to use the latest action version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ${{
            github.head_ref
              && format('gh pr checkout {0}', github.event.pull_request.number) 
              || format('git pull --rebase origin {0}', github.ref_name) 
          }}
      - uses: ./restore
        with:
          primary-key: test-collision-${{ env.hash-nix1 }}-${{ env.hash-nix2 }}

      # - run: curl bashupload.com -T /nix/var/nix/db/db.sqlite

      - name: Save nixpkgs for nix1
        run: |
          nix registry pin nixpkgs-nix1 github:nixos/nixpkgs/${{ env.hash-nix1 }}
          nix profile install "$(nix flake archive nixpkgs-nix1 --json | jq -r '.path')"
      - name: Save nixpkgs for nix2
        run: |
          nix registry pin nixpkgs-nix2 github:nixos/nixpkgs/${{ env.hash-nix2 }}
          nix profile install "$(nix flake archive nixpkgs-nix2 --json | jq -r '.path')" --priority 10
      - name: Install nix1
        run: nix profile install ${{ env.installable-nix1 }} --priority 20
      - name: Install nix2
        run: nix profile install ${{ env.installable-nix2 }} --priority 30
      - name: See libgcc paths in the nix1 closure
        run: |
          NIX_LIBGCC_PATHS="$(
            nix derivation show ${{ env.installable-nix1 }} \
            | jq -r '.[] .outputs.out.path' \
            | xargs -I {} nix-store -qR --include-outputs {}\
            | grep libgcc \
            || printf "error!")"
          printf "%s\n" "$NIX_LIBGCC_PATHS"
          {
            echo 'NIX1_LIBGCC_PATHS<<EOF'
            printf "%s\n" "$NIX_LIBGCC_PATHS"
            echo 'EOF'
          } >> "$GITHUB_ENV"
      - name: See libgcc paths in the nix2 closure
        run: |
          NIX_LIBGCC_PATHS="$(
            nix derivation show ${{ env.installable-nix2 }} \
            | jq -r '.[] .outputs.out.path' \
            | xargs -I {} nix-store -qR --include-outputs {}\
            | grep libgcc \
            || printf "error!")"
          printf "%s\n" "$NIX_LIBGCC_PATHS"
          {
            echo 'NIX2_LIBGCC_PATHS<<EOF'
            printf "%s\n" "$NIX_LIBGCC_PATHS"
            echo 'EOF'
          } >> "$GITHUB_ENV"
      - name: Observe hash collision
        id: hashCollision
        run: |
          NIX1_HASHES="$(nix hash path $NIX1_LIBGCC_PATHS)"
          NIX2_HASHES="$(nix hash path $NIX2_LIBGCC_PATHS)"

          printf "%s\n" "$NIX1_HASHES"
          printf "%s\n" "$NIX2_HASHES"

          if [[ "$NIX1_HASHES" != "$NIX2_HASHES" ]]; then
            echo "This pair of packages doesn't produce a collision."
            exit 1
          fi

      # - name: Setup tmate session
      #   if: failure() && steps.hashCollision.outcome == 'failure'
      #   uses: mxschmitt/action-tmate@v3

      - run: |
          STORE_LIBGCC_PATHS="$(ls /nix/store | grep libgcc)"
          echo "$STORE_LIBGCC_PATHS"
          {
            echo 'STORE_LIBGCC_PATHS_BEFORE_GC<<EOF'
            printf "%s\n" "$STORE_LIBGCC_PATHS"
            echo 'EOF'
          } >> "$GITHUB_ENV"
      - run: nix store gc -vv
      - run: |
          STORE_LIBGCC_PATHS="$(ls /nix/store | grep libgcc)"
          echo "$STORE_LIBGCC_PATHS"
          {
            echo 'STORE_LIBGCC_PATHS_AFTER_GC<<EOF'
            printf "%s\n" "$STORE_LIBGCC_PATHS"
            echo 'EOF'
          } >> "$GITHUB_ENV"
      - run: |
          if [[ "$STORE_LIBGCC_PATHS_BEFORE_GC" != "$STORE_LIBGCC_PATHS_AFTER_GC" ]]; then
            echo "Some necessary paths were garbage collected. See these paths in previous steps."
            exit 1
          fi
      - uses: ./save
        if: always()
        with:
          primary-key: test-collision-${{ env.hash-nix1 }}-${{ env.hash-nix2 }}
          gc-max-store-size-linux: 0
          purge: true
          purge-prefixes: test-collision-
          purge-created: 0
          purge-primary-key: never
